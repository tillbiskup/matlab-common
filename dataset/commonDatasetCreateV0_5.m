function dataset = commonDatasetCreateV0_5(varargin)
% COMMONDATASETCREATEV0_5 Create and return data structure of most general
% dataset.
%
% Usage
%   dataset = commonDatasetCreateV0_5
%   dataset = commonDatasetCreateV0_5(<parameters>)
%
%   dataset    - struct
%                Structure complying with the data structure of the dataset
%                of the common toolbox
%
%   parameters - key-value pairs (OPTIONAL)
%
%                Optional parameters may include:
%
%                numberOfAxes      - scalar
%                                    Number of axes the dataset should have
%                                    Default: 2
%
%                hasOptionalFields - logical
%                                    Should  the dataset have optional
%                                    fields?
%                                    Default: false
%    
% Hint: Parameters can be provided as a structure with the fieldnames
% corresponding to the parameter names specified above.
%
% SEE ALSO: commonHistoryCreate

% Copyright (c) 2014-16, Till Biskup
% 2016-01-18

% Assign output parameter
dataset = struct();

% Parse input arguments using the inputParser functionality
p = inputParser;            % Create an instance of the inputParser class.
p.FunctionName = mfilename; % Function name to be included in error messages
p.KeepUnmatched = true;     % Enable errors on unmatched arguments
p.StructExpand = true;      % Enable passing arguments in a structure
% Add optional parameters, with default values
p.addParamValue('numberOfAxes',2,@isscalar);
p.addParamValue('numberOfCalculated',1,@isscalar);
p.addParamValue('hasOptionalFields',false,@islogical);
% Parse input arguments
p.parse(varargin{:});

% Define version of dataset structure
structureVersion = '0.5-beta';

dataset.data.data = [];
for axis = 1:p.Results.numberOfAxes
    dataset.data.axes(axis) = axisStructureCreate;
end

dataset.origdata = dataset.data;

dataset.data.display = displayStructureCreate(p.Results.numberOfAxes);

dataset.calculated = cell(0);
for calculated = 1:p.Results.numberOfCalculated
    dataset.calculated{calculated} = struct(...
        'data',[],...
        'axes',dataset.data.axes, ...
        'display',displayStructureCreate(p.Results.numberOfAxes), ...
    	'direction',1, ...
        'position',1,...
        'scaling',1,...
        'infoStructure','' ...
        );
end

dataset.parameters = struct(...
    'operator','',...
    'date',struct(...
        'start',datestr(0,31),...
        'end',datestr(0,31)...
        ),...
    'temperature',struct(...
        'value',[],...
        'unit','' ...
        ) ...
    );
% NOTE: Matlab doesn't handle cells defined in structs together with other
%       parameters. Therefore, you have to add them explicitly afterwards.
dataset.parameters.purpose = cell(0);
dataset.parameters.comment = cell(0);

dataset.sample = struct(...
    'name','', ...
    'id','' ...
    );
dataset.sample.description = cell(0);
dataset.sample.solvent = cell(0);
dataset.sample.preparation = cell(0);

dataset.history = cell(0);
dataset.file = struct(...
    'name','', ...
    'format','' ...
    );
dataset.format = struct(...
    'type','common dataset',...
    'version',structureVersion ...
    );
dataset.label = '';
dataset.representations = cell(0);

if p.Results.hasOptionalFields
end

end

function axis = axisStructureCreate

axis = struct(...
    'values',[],...
    'measure','',...
    'unit','' ...
    );

end

function display = displayStructureCreate(numberOfAxes)

display = struct(...
    'type','',...
    'position',ones(1,numberOfAxes),...
    'lines',lineStructureCreate(),...
    'grid',struct(...
        'x',false,...
        'y',false,...
        'minor',false,...
        'zero',lineStructureCreate()...
        ),...
    'limits',ones(numberOfAxes,2),...
    'zoom',ones(numberOfAxes,2),...
    'scaling',ones(1,numberOfAxes+1),...
    'smoothing',struct(...
        'value',[],...
        'filterFunction',''...
        ),...
    'legend',struct(...
        'handle',[],...
        'location','none',...
        'FontName','Helvetica',...
        'FontWeight','normal',...
        'FontAngle','normal',...
        'FontSize',12 ...
        ) ...
    );

end

function lineStructure = lineStructureCreate()

lineStructure = struct(...
    'color',[0 0 0],...
    'style','-',...
    'marker','none',...
    'width',1 ...
    );

end